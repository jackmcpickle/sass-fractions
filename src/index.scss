$single-fraction-names: (
  whole,
  half,
  third,
  quarter,
  fifth,
  sixth,
  seventh,
  eighth,
  nineth,
  tenth,
  eleventh,
  twelfth
) !default;
$digit-names: (one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve) !default;

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  $result: 0;
  $digits: 0;
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return $result;
}

@function greatest-common-factor($a, $b) {
  $a: abs($a);
  $b: abs($b);

  @while ($b > 0) {
    $c: $a % $b;
    $a: $b;
    $b: $c;
  }
  @return $a;
}

@function normalize($numerator, $denominator) {
  $gcf: greatest-common-factor($numerator, $denominator);
  $numerator: $numerator / $gcf;
  $denominator: $denominator / $gcf;
  @if $denominator < 0 {
    $numerator: $numerator * -1;
    $denominator: $denominator * -1;
  }
  @return ($numerator, $denominator);
}

@function has-many($test) {
  @if type-of($test) == 'number' {
    @return $test > 1;
  } @else if type-of($test) == 'list' {
    @return length($test) > 1;
  } @else if type-of($test) == 'map' {
    @return length($test) > 1;
  } @else if type-of($test) == 'string' {
    @return str-slice($test, -1) == 's';
  } @else {
    @return false;
  }
}

@function pulurize($word, $test) {
  @if not has-many($test) {
    @return $word;
  }
  @if str-slice($word, -2) == 'lf' {
    @return str-slice($word, 1, -2) + ves;
  } @else {
    @return $word + s;
  }
}

$fraction-separator: '-' !default;
$lowest-common-denominator: true !default;

@function fraction-names($numerator, $denominator, $separator: $fraction-separator, $lcd: $lowest-common-denominator) {
  $normalize: ();
  @if $lcd {
    $normalize: normalize($numerator, $denominator);
  } @else {
    $normalize: $numerator, $denominator;
  }
  $normalize-numerator: nth($normalize, 1);
  $normalize-denominator: nth($normalize, 2);
  $numerator-name: nth($digit-names, $normalize-numerator);
  $denominator-name: nth($single-fraction-names, $normalize-denominator);
  $denominator-name-pulurize: pulurize($denominator-name, $normalize-numerator);
  @return #{$numerator-name + $separator + $denominator-name-pulurize};
}

@function lowest-fraction($numerator, $denominator, $separator: $fraction-separator) {
  $normalize: normalize($numerator, $denominator);
  @return #{nth($normalize, 1) + $separator + nth($normalize, 2)};
}

@function wfrac($numerator, $denominator, $separator: $fraction-separator, $lcd: $lowest-common-denominator) {
  @return fraction-names($numerator, $denominator, $separator, $lcd);
}

@function lfrac($numerator, $denominator, $separator: $fraction-separator) {
  @return lowest-fraction($numerator, $denominator, $separator);
}

@function frac2word(
  $string,
  $string-separator: '/',
  $fraction-separator: $fraction-separator,
  $lcd: $lowest-common-denominator
) {
  $separator-index: str-index($string, $string-separator);
  $numerator: to-number(str-slice($string, 1, $separator-index - 1));
  $denominator: to-number(str-slice($string, $separator-index + 1));
  @return fraction-names($numerator, $denominator, $fraction-separator, $lcd);
}

@function frac2low($string, $string-separator: '/', $fraction-separator: $fraction-separator) {
  $separator-index: str-index($string, $string-separator);
  $numerator: to-number(str-slice($string, 1, $separator-index - 1));
  $denominator: to-number(str-slice($string, $separator-index + 1));
  @return lowest-fraction($numerator, $denominator, $fraction-separator);
}
