@function greatest-common-factor($a, $b) {
    $a: abs($a);
    $b: abs($b);

    @while ($b > 0) {
        $c: $a % $b;
        $a: $b;
        $b: $c;
    }
    @return $a;
};

@function normalize($numerator, $denominator) {
  $gcf: greatest-common-factor($numerator, $denominator);
  $numerator: $numerator / $gcf;
  $denominator: $denominator / $gcf;
  @if $denominator < 0 {
      $numerator: $numerator * -1;
      $denominator: $denominator * -1;
  }
  @return ($numerator, $denominator);
}

$single-fraction-names: (
  1: whole,
  2: half,
  3: third,
  4: quarter,
  5: fifth,
  6: sixth,
  7: seventh,
  8: eighth,
  9: nineth,
  10: tenth,
  11: eleventh,
  12: twelth
);

$digit-names: (1: one, 2: two, 3: three, 4: four, 5: five, 6: six, 7: seven, 8: eight, 9: nine, 10: ten, 11: eleven, 12: twelve);


@function has-many($test) {
  @if type-of($test) == 'number' {
    @return $test > 1;
  }
  @else if type-of($test) == 'list' {
    @return length($test) > 1;
  }
  @else if type-of($test) == 'map' {
    @return length($test) > 1;
  }
  @else if type-of($test) == 'string' {
    @return str-slice($test, -1) == 's';
  } @else {
    @return false;
  }
}

@function pulurize($word, $test) {
  @if not has-many($test) {
    @return $word;
  }
  @if str-slice($word, -2) == 'lf' {
    @return str-slice($word, -2) + es;
  } @else {
    @return $word + s;
  }
}

$total-columns: 12;

@for $i from 1 through $total-columns {
  // Base grid
  $normalize: normalize($i, $total-columns);
  $numerator: map-get($digit-names, nth($normalize, 1));
  $denominator: pulurize(map-get($single-fraction-names, nth($normalize, 2)), nth($normalize, 1) );

  .grid-item-#{$numerator}-#{$denominator} {
    width: percentage($i / $total-columns);
  }
}
